code-body: yes
created: 20220901134315261
modified: 20220903171744665
title: $:/PaletteManager/globals

<!-- TiddlyTools Palette Manager compatibility settings https://tiddlytools.com/#TiddlyTools%2FPalettes%2FManager -->
<!-- Important -- The following elements have to be the same as set in TiddlyTools Palette Manager -->
\define popup() $:/state/popup/TiddlyTools/PaletteManager
\define find()  $(popup)$/find

<!-- custom resolved colour picker -->
\define pick()  $(popup)$/pick
\define X11Colors() TiddlyTools/Settings/Colors/X11

<!-- Show / Hide Previews -->
\define previews() $(popup)$/showpreviews

<!-- The following macro is borrowed from TiddlyTools PalettesManager with consent from Eric Shulman -->
<!-- So "praise and glory" goes to him ;) -->
<!-- TT-PM: https://tiddlytools.com/#TiddlyTools%2FPalettes%2FManager:TiddlyTools%2FPalettes%2FManager version from 19. Feb. 2023 -->
<!-- TT-X11 Configurations: https://tiddlytools.com/#TiddlyTools%2FSettings%2FColors%2FX11 -->
\define palette-manager-colour-row-pick()
\define hex()  ^#[A-Fa-f0-9]{3}$
\define hexa() ^#[A-Fa-f0-9]{8}$
<$eventcatcher $focusin="<<palette-manager-colour-row-save-undo>>"> <!-- WL-PM It seems I do not need this undo macro -->
<!-- GET PALETTE COLOR -->
<$let colourValue={{{ [<currentTiddler>getindex<colourName>] }}}>
<!-- RESOLVE MACRO OR WIDGET -->
<$wikify name=resolvedValue text=<<colourValue>>> <$let colourValue={{{ [<colourValue>prefix[#]then<colourValue>else<resolvedValue>] }}}>
<!-- MATCH X11 NAMES (CASE INSENSITIVE) -->
<$let lower={{{ [<colourValue>lowercase[]] }}} colourValue={{{ [<X11Colors>indexes[]] :filter[lowercase[]match<lower>] :map[<X11Colors>getindex<currentTiddler>] +[!match[]else<colourValue>] }}}>
<!-- EXPAND #RGB to #RRGGBB -->
<$let colourValue={{{ [<colourValue>regexp<hex>split[]!match[#]] :map[<currentTiddler>addsuffix<currentTiddler>] +[join[]!match[]addprefix[#]else<colourValue>] }}}>
<!-- TRUNCATE #RRGGBBAA (IGNORE ALPHA CHANNEL) -->
<$let colourValue={{{ [<colourValue>regexp<hexa>split[]first[7]join[]] ~[<colourValue>] }}}>
<!-- CONVERT RGB(r,g,b) OR RGBA(r,g,b,a) TO #RRGGBB (IGNORE ALPHA CHANNEL) -->
<$let dec={{{ [<colourValue>lowercase[]prefix[rgb]split[(]nth[2]trim[)]split[,]first[3]join[ ]] }}}
	   hi={{{ [enlist:raw<dec>divide[16]]    :map[[0123456789ABCDEF]split[]zth<currentTiddler>] +[join[ ]] }}}
       lo={{{ [enlist:raw<dec>remainder[16]] :map[[0123456789ABCDEF]split[]zth<currentTiddler>] +[join[ ]] }}}
		r={{{ [enlist:raw<hi>nth[1]] =[enlist:raw<lo>nth[1]] +[join[]] }}}
        g={{{ [enlist:raw<hi>nth[2]] =[enlist:raw<lo>nth[2]] +[join[]] }}}
        b={{{ [enlist:raw<hi>nth[3]] =[enlist:raw<lo>nth[3]] +[join[]] }}}
	colourValue={{{ [<r>] =[<g>] =[<b>] +[join[]!match[]addprefix[#]else<colourValue>] }}}>
<span title='pick color for "$(colourName)$"'>
<$eventcatcher $change="<$action-setfield $tiddler=<<currentTiddler>> $index=<<colourName>> $value={{{ [<pick>getindex<colourName>] }}}/><$action-deletetiddler $tiddler=<<pick>>/>">
<$edit-text tiddler=<<pick>> index=<<colourName>> tag=input class="tc-palette-manager-colour-input $(colourName)$" type="color" default=<<colourValue>>/>
\end